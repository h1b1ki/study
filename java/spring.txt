@Autowired与Resource
@Autowired   首先从spring容器中获取xx实现类,注入该属性,bytype--根据类型 可联动@qualifier(name)指定需要的BEAN
@Resource     直接从spring容器中获取名为xx的bean,注入,byname--根据名称 如果没找到就按照@Autowired那样根据类型去找
@Resource(name="userdaoimp1")  @Resource(type=Userdaoimp1.class)  都是你实现类的名称
                   @Autowired                   @Resource
private calss Userdaoimp1    implements    Userdao

@Repository和@Controller、@Service、@Component的作用差不多，都是把对象交给spring管理。
可以@Repository(name=xx)这样指定你  bean    的名称,不然名字为你类名字的小写

@Configuration注解，等于spring xml ，后续类加上@bean可以自动设置你的xml
AnnotationConfigApplicationContext.getBeanDefinitionNames()获得spring中注入的bean对象
@componentscan("path")扫包

resources/static储存静态页面
resources/templates储存动态页面
我们直接在static放一个hello.html,然后直接输入http://localhost:8080/hello.html便能成功访问
也可以通过controller跳转：
@Controller
public class HelloController {
    @RequestMapping("/Hi")
    public String sayHello() {
        return "hello.html";
    }
}
然后输入http://localhost:8080/Hi就可以成功访问

动态页面需要先请求服务器，访问后台应用程序，然后再转向到页面，比如访问JSP。spring boot建议不要使用JSP，默认使用Thymeleaf来做动态页面。
现在pom中要添加Thymeleaf组件
<dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-thymeleaf</artifactId>  
</dependency> 
我们先在tempates文件夹中也新建一个hello.html但内容不同，然后先试一下直接访问该页面。输入http://localhost:8080/hello.html：


LinkedHashMap是继承于HashMap，是基于HashMap和双向链表来实现的。
HashMap无序；LinkedHashMap有序，可分为插入顺序和访问顺序两种。如果是访问顺序，那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。
LinkedHashMap存取数据，还是跟HashMap一样使用的Entry[]的方式，双向链表只是为了保证顺序。
LinkedHashMap是线程不安全的。
